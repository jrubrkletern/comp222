#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Define structure for instruction containing fields for instruction string,
destination register, 2 source registers, and individual instruction delay
and a variable as pointer to structure for creating a dynamic array of instructions */


typedef struct node {
char instr_String[13];
int dest;
int src1;
int src2;
int delay;
} instrType;
/* global var's */

instrType *instr_set = NULL;
int num_instr = 0;
int delay = 0;


/*************************************************************/
void constructScoreBoard()
{
/* Declare local variables*/
int i;




/* Prompt for total number of instructions */

printf("Enter total number of instructions.\n");
scanf("%d", &num_instr);
/* Allocate memory to hold a set of instructions */
instr_set = (instrType*)malloc((3*num_instr+1)*sizeof(instrType));


instr_set[0].dest = -1;
/* Initialize instruction 0's destination register to -1 to
prevent false RAW dependency w/ instruction 2 */

/* For each instruction, prompt for user input and read instruction as a string
and store at proper field of appropriate index within dynamic array of instructions */
for(i=1; i <= num_instr; i++) {
		scanf("%s", instr_set[i].instr_String);
		instr_set[i].dest = instr_set[i].instr_String[5]-'0';
		instr_set[i].src1 = instr_set[i].instr_String[8]-'0';
 	instr_set[i].src2 = instr_set[i].instr_String[11]-'0';
}


return;

}

/*****************************************************/
void dynamicPipeline()
{
/* Declare local variables */
int i;

int overlap = 0;
instr_set[1].delay = 0;

for(i=2; i <= num_instr; i++) {
delay = 0;


	if(instr_set[i].src1 == instr_set[i-2].dest || instr_set[i].src2 == instr_set[i-2].dest) {
			if(overlap == 0) {
				delay = 1;
				overlap = 1;
			}
			else {
				delay = 0;
				overlap = 0;
			}

	} else {
			overlap = 0;
	}

	if(instr_set[i].src1 == instr_set[i-1].dest || instr_set[i].src2 == instr_set[i-1].dest) {

			delay = 2;
			overlap = 1;



	}



instr_set[i].delay = delay; // + instr_set[i-1].delay;



}
printf("\n\n");
/* For each instruction i from 2 to total number of instructions,
	initialize delay as 0 and check for dependency
	between instruction (i-2) and i, as well as between instruction (i-1) and i */

	/* If dependency,  set delay appropriately, as well
	as a flag to check for possible overlap between dependent instructions */

	/* Note: general formula for delay:
		delay=2 if instruction i depends on instruction (i-1)
		delay=1 if instruction i depends on instruction (i-2)
		and no overlapping dependency of higher precedent
		delay=0 otherwise
	*/

	/* set delay for instruction i based on calculated delay*/



 /* end for-loop */

/* Calculate and print total cycles (include overhead from instruction 1*/

/* Print Instruction string & Gantt chart by tabbing each instruction's cycles
based on each instruction's delay */

int total_cycles =  5 + num_instr -1;
for(int i = 1; i <= num_instr; i++) {

	total_cycles += instr_set[i].delay;
}


printf("Total cycles: %d\n", total_cycles);

int ceiling;
for(i =1; i <= num_instr; i++) {

	printf("%s:", instr_set[i].instr_String);
	ceiling += 1 + instr_set[i].delay;
	for (int t = 1; t <= ceiling; t++) {

		printf("\t");

	}
	printf("IF\tID\tEX\tME\tWB\n");

}
return;
}

void staticPipeline()
{
/* Declare local variables */

/* For each instruction i from 2 to total number of instructions
	initialize delay as 0 and check for dependency
	between instruction (i-2) and i, as well as between instruction (i-1) and i */
	int i;

	int overlap = 0;
	instr_set[1].delay = 0;

	for(i=2; i <= num_instr; i++) {
	delay = 0;


		if(instr_set[i].src1 == instr_set[i-2].dest || instr_set[i].src2 == instr_set[i-2].dest) {
				if(overlap == 0) {
					delay = 1;
					overlap = 1;
				}
				else {
					delay = 0;
					overlap = 0;
				}

		} else {
				overlap = 0;
		}

		if(instr_set[i].src1 == instr_set[i-1].dest || instr_set[i].src2 == instr_set[i-1].dest) {

				delay = 2;
				overlap = 1;



		}
	int total_cycles =  5 + num_instr -1;


	instr_set[i].delay = delay; // + instr_set[i-1].delay;



	}
printf("\n\n");
	/* If dependency, add NOPs appropriately by shifting remaining instructions down
	and set delay & flag to check for possible overlap between dependent instructions,
	and increase total number of instructions appropriately*/

	/* Note: general formula for delay:
	delay=2 if instruction i depends on instruction (i-1)
	delay=1 if instruction i depends on instruction (i-2) and no dependency of higher precedent
	delay=0 otherwise
	*/

int num_temp = num_instr;
	for(int i = 1; i <= num_temp; i++) {

		num_instr += instr_set[i].delay;
	}
int k =1;

while(num_temp != num_instr) {

if(instr_set[k].delay == 1) {
	instr_set[k].delay = 0;
	for(int i = num_temp; i >= k; i--) {
		instr_set[i+1].dest = instr_set[i].dest;
		instr_set[i+1].src1 = instr_set[i].src1;
		instr_set[i+1].src2 = instr_set[i].src2;
		instr_set[i+1].delay = instr_set[i].delay;
		strcpy(instr_set[i+1].instr_String, instr_set[i].instr_String);

	}

	strcpy(instr_set[k].instr_String, "NOP");
	num_temp++;
	k++;

} else if(instr_set[k].delay == 2) {
	instr_set[k].delay = 0;
	for(int i = num_temp; i >= k; i--) {
		instr_set[i+2].dest = instr_set[i].dest;
		instr_set[i+2].src1 = instr_set[i].src1;
		instr_set[i+2].src2 = instr_set[i].src2;
		instr_set[i+2].delay = instr_set[i].delay;
		strcpy(instr_set[i+2].instr_String, instr_set[i].instr_String);

	}

	strcpy(instr_set[k].instr_String, "NOP");
	strcpy(instr_set[k+1].instr_String, "NOP");
	num_temp += 2;
	k+=2;

} else k++;




}



int total_cycles =  5 + num_instr -1;

printf("Total cycles: %d\n", total_cycles);




for(i =1; i <= num_instr; i++) {

	printf("%s:", instr_set[i].instr_String);
	if(strcmp(instr_set[i].instr_String, "NOP") == 0) {
		printf("\t");
	}
	for (int t = 1; t <= i; t++) {

		printf("\t");

	}
	printf("IF\tID\tEX\tME\tWB\n");
}

 /* end for-loop */
//do for delay 1 as well, where you see a 2 just do a 1.
/* Calculate and print total cycles (include overhead from instruction 1*/

/* Print Instruction string & Gantt chart
by tabbing each instruction's cycles appropriately
*/



return;
}

/*void quit_program() {
if(instr_set != NULL) {

			free(instr_set);
		}
return;
}*/
/****************************************************************/
int main()
{
	int choice = 0;
	/* until user chooses to quit, print menu,
	select choice via switch statement and call appropriate function*/
	while(choice != 4) {
	scanf("%d", &choice);

	switch(choice) {
		case 1: constructScoreBoard(); break;
		case 2: dynamicPipeline(); break;
		case 3: staticPipeline(); break;
		//case 4: quit_program(); break;
		default:
		break;


		}
	}
/* declare local var's */

/* until program exits, print menu, select choice via switch statement and call appropriate function*/
  return 1;
}
